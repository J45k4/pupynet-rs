name: Rust CI/CD

on:
  push:
    branches:
      - master
    tags:
      - '*'   # Trigger on all tag pushes
  pull_request:
    branches:
      - master

permissions:
  contents: write  # Required for creating releases

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1. Checkout the repository with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history to ensure all branches and tags are available

      # 2. Cache Cargo dependencies
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # 3. Set up Rust toolchain with rustflags
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          rustflags: -A unused_imports  # Disable warnings for unused imports

      # 4. Build the project in release mode
      - name: Build
        run: cargo build --release - pupynet

      # 5. Run tests
      - name: Test
        run: cargo test --release

      # 6. Package the binary (Windows)
      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        id: package_windows
        shell: pwsh
        run: |
          $binaryName = "pupynet.exe"
          $archiveName = "pupynet-${{ github.ref_name }}-windows.zip"
          $binaryPath = "target/release/$binaryName"
          Compress-Archive -Path $binaryPath -DestinationPath $archiveName -Force
          Write-Output "artifact_path=$archiveName" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8

      # 7. Package the binary (Unix)
      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        id: package_unix
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ARCHIVE_SUFFIX="macos.tar.gz"
          else
            ARCHIVE_SUFFIX="linux.tar.gz"
          fi
          BINARY_NAME="pupynet"
          ARCHIVE_NAME="pupynet-${{ github.ref_name }}-${ARCHIVE_SUFFIX}"
          tar -czf "$ARCHIVE_NAME" -C target/release "$BINARY_NAME"
          echo "artifact_path=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      # 8. Upload the packaged binary as an artifact
      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: pupynet-${{ matrix.os }}
          path: ${{ steps.package_windows.outputs.artifact_path }}

      - name: Upload Artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: pupynet-${{ matrix.os }}
          path: ${{ steps.package_unix.outputs.artifact_path }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Ensure it's a tag push

    steps:
      # 1. Checkout the repository (optional)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Download all artifacts from build jobs
      - name: Download Linux Artifact
        uses: actions/download-artifact@v3
        with:
          name: pupynet-ubuntu-latest
          path: artifacts/linux/

      - name: Download Windows Artifact
        uses: actions/download-artifact@v3
        with:
          name: pupynet-windows-latest
          path: artifacts/windows/

      - name: Download macOS Artifact
        uses: actions/download-artifact@v3
        with:
          name: pupynet-macos-latest
          path: artifacts/macos/

      # 3. Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. Upload Release Assets (Linux)
      - name: Upload Release Asset (Linux)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: pupynet-${{ github.ref_name }}-linux.tar.gz
          files: artifacts/linux/pupynet-${{ github.ref_name }}-linux.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 5. Upload Release Asset (Windows)
      - name: Upload Release Asset (Windows)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: pupynet-${{ github.ref_name }}-windows.zip
          files: artifacts/windows/pupynet-${{ github.ref_name }}-windows.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. Upload Release Asset (macOS)
      - name: Upload Release Asset (macOS)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: pupynet-${{ github.ref_name }}-macos.tar.gz
          files: artifacts/macos/pupynet-${{ github.ref_name }}-macos.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}