name: Rust CI/CD

on:
  push:
    branches:
      - main
    tags:
      - '*'   # Trigger on all tag pushes
  pull_request:
    branches:
      - main

permissions:
  contents: write  # Required for creating releases

env:
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1. Checkout the repository with full history
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Cache Cargo dependencies
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      # 3. Set up Rust toolchain
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true

      # 4. Build the project in release mode
      - name: Build
        env:
          VERSION: ${{ github.ref_name }}
        run: cargo build --release -p pupynet

      # 5. Run tests
      - name: Test
        run: cargo test --release

      # 6. Sign the binary
      # For Windows
      - name: Sign Binary (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $Env:PRIVATE_KEY | Out-File -FilePath private_key.pem -Encoding ASCII
          openssl dgst -sha256 -sign private_key.pem -out target\release\pupynet.sig target\release\pupynet.exe
          Remove-Item private_key.pem

      # For Unix (Linux/MacOS)
      - name: Sign Binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          openssl dgst -sha256 -sign private_key.pem -out target/release/pupynet.sig target/release/pupynet
          rm private_key.pem

      # 7. Package the binary (Windows)
      - name: Package Binary (Windows)
        if: matrix.os == 'windows-latest'
        id: package_windows
        shell: pwsh
        run: |
          $binaryName = "pupynet.exe"
          $archiveName = "$($binaryName)-${{ github.ref_name }}-windows.zip"
          Compress-Archive -Path "target\release\$binaryName","target\release\pupynet.sig" -DestinationPath "$archiveName"
          echo "artifact_name=$archiveName" >> $env:GITHUB_OUTPUT

      # 8. Package the binary (Unix)
      - name: Package Binary (Unix)
        if: matrix.os != 'windows-latest'
        id: package_unix
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            ARCHIVE_SUFFIX="macos.tar.gz"
          else
            ARCHIVE_SUFFIX="linux.tar.gz"
          fi
          BINARY_NAME="pupynet"
          ARCHIVE_NAME="$BINARY_NAME-${{ github.ref_name }}-$ARCHIVE_SUFFIX"
          # Include pupynet and pupynet.sig in the archive
          tar -czf "$ARCHIVE_NAME" -C target/release "$BINARY_NAME" "pupynet.sig"
          echo "artifact_name=$ARCHIVE_NAME" >> $GITHUB_OUTPUT

      # 9. Upload the packaged binary as an artifact
      - name: Upload Artifact (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: windows
          path: ${{ steps.package_windows.outputs.artifact_name }}

      - name: Upload Artifact (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}
          path: ${{ steps.package_unix.outputs.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')  # Ensure it's a tag push

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # 2. Download all artifacts from build job
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts/

      # 3. Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: artifacts/**
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
